ğŸ§ª Roteiro de LaboratÃ³rio â€“ GenÃ©ricos em C#
Disciplina: ProgramaÃ§Ã£o Orientada a Objetos
Linguagem: C#
Tema: IntroduÃ§Ã£o e AplicaÃ§Ã£o de GenÃ©ricos
Objetivo: Compreender, implementar e aplicar generics em classes, mÃ©todos e interfaces.

âœ… PrÃ©-requisitos
Antes de iniciar este laboratÃ³rio, vocÃª deve:

Entender os conceitos de classe e mÃ©todo.

Ter familiaridade com listas (List<T>) e orientaÃ§Ã£o a objetos em C#.

Saber como criar e utilizar interfaces.

Teste cada etapa no Program.cs para entender o compartamento. Mantenha o cÃ³digo de todos os testes; pode ir comentando a medida que for avanÃ§ando nas etapas.
Compactar o projeto completo, com o cÃ³digo fonte e enviar em formato .zip.
ğŸ”§ Ambiente de Desenvolvimento
VocÃª pode usar qualquer ambiente compatÃ­vel com C#:

Visual Studio

Visual Studio Code com extensÃ£o C#

.NET CLI

ğŸ§­ Etapas do LaboratÃ³rio
ğŸ”¹ Etapa 1 â€“ IntroduÃ§Ã£o ao Problema
Atividade 1.1 â€“ Classe sem generics

Crie uma classe chamada CaixaObjeto que armazene qualquer valor como object.

class CaixaObjeto
{
    public object Valor { get; set; }
}
Teste com tipos diferentes e tente acessar sem cast. O que acontece?

Atividade 1.2 â€“ Refatorando com Generics

Crie agora uma versÃ£o genÃ©rica chamada Caixa<T>:

class Caixa<T>
{
    public T Valor { get; set; }
}
Use com int, string, DateTime e compare a clareza e seguranÃ§a com a versÃ£o anterior.

ğŸ”¹ Etapa 2 â€“ MÃ©todos e Classes GenÃ©ricas
Atividade 2.1 â€“ MÃ©todo GenÃ©rico Trocar

Implemente um mÃ©todo genÃ©rico para trocar dois valores:

public static void Trocar<T>(ref T a, ref T b)
{
    T temp = a;
    a = b;
    b = temp;
}
Teste com tipos diferentes.

Atividade 2.2 â€“ Classe Par GenÃ©rica

Crie uma classe Par<T1, T2> que armazene dois valores e os imprima.

class Par<T1, T2>
{
    public T1 Primeiro { get; set; }
    public T2 Segundo { get; set; }
    public void Exibir()
    {
        Console.WriteLine($"({Primeiro}, {Segundo})");
    }
}
ğŸ”¹ Etapa 3 â€“ Interface GenÃ©rica + ImplementaÃ§Ã£o
Atividade 3.1 â€“ Criar interface genÃ©rica IRepositorio<T>

public interface IRepositorio<T>
{
    void Adicionar(T item);
    List<T> ListarTodos();
}
Atividade 3.2 â€“ Implementar RepositorioEmMemoria<T>

public class RepositorioEmMemoria<T> : IRepositorio<T>
{
    private List<T> itens = new List<T>();

    public void Adicionar(T item) => itens.Add(item);

    public List<T> ListarTodos() => itens;
}
Teste com uma classe Produto simples.

ğŸ”¹ Etapa 4 â€“ RestriÃ§Ãµes em Generics
Atividade 4.1 â€“ RestriÃ§Ã£o com Construtor PadrÃ£o

public class RepositorioComInstancia<T> where T : new()
{
    public T CriarItem() => new T();
}
Use com uma classe que tenha construtor vazio.

Atividade 4.2 â€“ RestriÃ§Ã£o com HeranÃ§a

Crie uma classe base Entidade com int Id. Reescreva o repositÃ³rio com:

where T : Entidade
Adicione mÃ©todo BuscarPorId(int id).